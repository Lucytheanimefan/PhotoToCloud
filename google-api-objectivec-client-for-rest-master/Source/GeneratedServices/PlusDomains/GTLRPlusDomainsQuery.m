// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Google+ Domains API (plusDomains/v1)
// Description:
//   Builds on top of the Google+ platform for Google Apps Domains.
// Documentation:
//   https://developers.google.com/+/domains/

#import "GTLRPlusDomainsQuery.h"

#import "GTLRPlusDomainsObjects.h"

// ----------------------------------------------------------------------------
// Constants

// collection
NSString * const kGTLRPlusDomainsCollectionCircled   = @"circled";
NSString * const kGTLRPlusDomainsCollectionCloud     = @"cloud";
NSString * const kGTLRPlusDomainsCollectionPlusoners = @"plusoners";
NSString * const kGTLRPlusDomainsCollectionResharers = @"resharers";
NSString * const kGTLRPlusDomainsCollectionSharedto  = @"sharedto";
NSString * const kGTLRPlusDomainsCollectionUser      = @"user";

// orderBy
NSString * const kGTLRPlusDomainsOrderByAlphabetical = @"alphabetical";
NSString * const kGTLRPlusDomainsOrderByBest         = @"best";

// sortOrder
NSString * const kGTLRPlusDomainsSortOrderAscending  = @"ascending";
NSString * const kGTLRPlusDomainsSortOrderDescending = @"descending";

// ----------------------------------------------------------------------------
// Query Classes
//

@implementation GTLRPlusDomainsQuery

@dynamic fields;

@end

@implementation GTLRPlusDomainsQuery_ActivitiesGet

@dynamic activityId;

+ (instancetype)queryWithActivityId:(NSString *)activityId {
  NSArray *pathParams = @[ @"activityId" ];
  NSString *pathURITemplate = @"activities/{activityId}";
  GTLRPlusDomainsQuery_ActivitiesGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.activityId = activityId;
  query.expectedObjectClass = [GTLRPlusDomains_Activity class];
  query.loggingName = @"plusDomains.activities.get";
  return query;
}

@end

@implementation GTLRPlusDomainsQuery_ActivitiesInsert

@dynamic preview, userId;

+ (instancetype)queryWithObject:(GTLRPlusDomains_Activity *)object
                         userId:(NSString *)userId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"userId" ];
  NSString *pathURITemplate = @"people/{userId}/activities";
  GTLRPlusDomainsQuery_ActivitiesInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.userId = userId;
  query.expectedObjectClass = [GTLRPlusDomains_Activity class];
  query.loggingName = @"plusDomains.activities.insert";
  return query;
}

@end

@implementation GTLRPlusDomainsQuery_ActivitiesList

@dynamic collection, maxResults, pageToken, userId;

+ (instancetype)queryWithUserId:(NSString *)userId
                     collection:(NSString *)collection {
  NSArray *pathParams = @[
    @"collection", @"userId"
  ];
  NSString *pathURITemplate = @"people/{userId}/activities/{collection}";
  GTLRPlusDomainsQuery_ActivitiesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.userId = userId;
  query.collection = collection;
  query.expectedObjectClass = [GTLRPlusDomains_ActivityFeed class];
  query.loggingName = @"plusDomains.activities.list";
  return query;
}

@end

@implementation GTLRPlusDomainsQuery_AudiencesList

@dynamic maxResults, pageToken, userId;

+ (instancetype)queryWithUserId:(NSString *)userId {
  NSArray *pathParams = @[ @"userId" ];
  NSString *pathURITemplate = @"people/{userId}/audiences";
  GTLRPlusDomainsQuery_AudiencesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.userId = userId;
  query.expectedObjectClass = [GTLRPlusDomains_AudiencesFeed class];
  query.loggingName = @"plusDomains.audiences.list";
  return query;
}

@end

@implementation GTLRPlusDomainsQuery_CirclesAddPeople

@dynamic circleId, email, userId;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"email" : [NSString class],
    @"userId" : [NSString class]
  };
  return map;
}

+ (instancetype)queryWithCircleId:(NSString *)circleId {
  NSArray *pathParams = @[ @"circleId" ];
  NSString *pathURITemplate = @"circles/{circleId}/people";
  GTLRPlusDomainsQuery_CirclesAddPeople *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.circleId = circleId;
  query.expectedObjectClass = [GTLRPlusDomains_Circle class];
  query.loggingName = @"plusDomains.circles.addPeople";
  return query;
}

@end

@implementation GTLRPlusDomainsQuery_CirclesGet

@dynamic circleId;

+ (instancetype)queryWithCircleId:(NSString *)circleId {
  NSArray *pathParams = @[ @"circleId" ];
  NSString *pathURITemplate = @"circles/{circleId}";
  GTLRPlusDomainsQuery_CirclesGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.circleId = circleId;
  query.expectedObjectClass = [GTLRPlusDomains_Circle class];
  query.loggingName = @"plusDomains.circles.get";
  return query;
}

@end

@implementation GTLRPlusDomainsQuery_CirclesInsert

@dynamic userId;

+ (instancetype)queryWithObject:(GTLRPlusDomains_Circle *)object
                         userId:(NSString *)userId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"userId" ];
  NSString *pathURITemplate = @"people/{userId}/circles";
  GTLRPlusDomainsQuery_CirclesInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.userId = userId;
  query.expectedObjectClass = [GTLRPlusDomains_Circle class];
  query.loggingName = @"plusDomains.circles.insert";
  return query;
}

@end

@implementation GTLRPlusDomainsQuery_CirclesList

@dynamic maxResults, pageToken, userId;

+ (instancetype)queryWithUserId:(NSString *)userId {
  NSArray *pathParams = @[ @"userId" ];
  NSString *pathURITemplate = @"people/{userId}/circles";
  GTLRPlusDomainsQuery_CirclesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.userId = userId;
  query.expectedObjectClass = [GTLRPlusDomains_CircleFeed class];
  query.loggingName = @"plusDomains.circles.list";
  return query;
}

@end

@implementation GTLRPlusDomainsQuery_CirclesPatch

@dynamic circleId;

+ (instancetype)queryWithObject:(GTLRPlusDomains_Circle *)object
                       circleId:(NSString *)circleId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"circleId" ];
  NSString *pathURITemplate = @"circles/{circleId}";
  GTLRPlusDomainsQuery_CirclesPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.circleId = circleId;
  query.expectedObjectClass = [GTLRPlusDomains_Circle class];
  query.loggingName = @"plusDomains.circles.patch";
  return query;
}

@end

@implementation GTLRPlusDomainsQuery_CirclesRemove

@dynamic circleId;

+ (instancetype)queryWithCircleId:(NSString *)circleId {
  NSArray *pathParams = @[ @"circleId" ];
  NSString *pathURITemplate = @"circles/{circleId}";
  GTLRPlusDomainsQuery_CirclesRemove *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.circleId = circleId;
  query.loggingName = @"plusDomains.circles.remove";
  return query;
}

@end

@implementation GTLRPlusDomainsQuery_CirclesRemovePeople

@dynamic circleId, email, userId;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"email" : [NSString class],
    @"userId" : [NSString class]
  };
  return map;
}

+ (instancetype)queryWithCircleId:(NSString *)circleId {
  NSArray *pathParams = @[ @"circleId" ];
  NSString *pathURITemplate = @"circles/{circleId}/people";
  GTLRPlusDomainsQuery_CirclesRemovePeople *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.circleId = circleId;
  query.loggingName = @"plusDomains.circles.removePeople";
  return query;
}

@end

@implementation GTLRPlusDomainsQuery_CirclesUpdate

@dynamic circleId;

+ (instancetype)queryWithObject:(GTLRPlusDomains_Circle *)object
                       circleId:(NSString *)circleId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"circleId" ];
  NSString *pathURITemplate = @"circles/{circleId}";
  GTLRPlusDomainsQuery_CirclesUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.circleId = circleId;
  query.expectedObjectClass = [GTLRPlusDomains_Circle class];
  query.loggingName = @"plusDomains.circles.update";
  return query;
}

@end

@implementation GTLRPlusDomainsQuery_CommentsGet

@dynamic commentId;

+ (instancetype)queryWithCommentId:(NSString *)commentId {
  NSArray *pathParams = @[ @"commentId" ];
  NSString *pathURITemplate = @"comments/{commentId}";
  GTLRPlusDomainsQuery_CommentsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.commentId = commentId;
  query.expectedObjectClass = [GTLRPlusDomains_Comment class];
  query.loggingName = @"plusDomains.comments.get";
  return query;
}

@end

@implementation GTLRPlusDomainsQuery_CommentsInsert

@dynamic activityId;

+ (instancetype)queryWithObject:(GTLRPlusDomains_Comment *)object
                     activityId:(NSString *)activityId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"activityId" ];
  NSString *pathURITemplate = @"activities/{activityId}/comments";
  GTLRPlusDomainsQuery_CommentsInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.activityId = activityId;
  query.expectedObjectClass = [GTLRPlusDomains_Comment class];
  query.loggingName = @"plusDomains.comments.insert";
  return query;
}

@end

@implementation GTLRPlusDomainsQuery_CommentsList

@dynamic activityId, maxResults, pageToken, sortOrder;

+ (instancetype)queryWithActivityId:(NSString *)activityId {
  NSArray *pathParams = @[ @"activityId" ];
  NSString *pathURITemplate = @"activities/{activityId}/comments";
  GTLRPlusDomainsQuery_CommentsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.activityId = activityId;
  query.expectedObjectClass = [GTLRPlusDomains_CommentFeed class];
  query.loggingName = @"plusDomains.comments.list";
  return query;
}

@end

@implementation GTLRPlusDomainsQuery_MediaInsert

@dynamic collection, userId;

+ (instancetype)queryWithObject:(GTLRPlusDomains_Media *)object
                         userId:(NSString *)userId
                     collection:(NSString *)collection
               uploadParameters:(GTLRUploadParameters *)uploadParameters {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"collection", @"userId"
  ];
  NSString *pathURITemplate = @"people/{userId}/media/{collection}";
  GTLRPlusDomainsQuery_MediaInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.userId = userId;
  query.collection = collection;
  query.uploadParameters = uploadParameters;
  query.expectedObjectClass = [GTLRPlusDomains_Media class];
  query.loggingName = @"plusDomains.media.insert";
  return query;
}

@end

@implementation GTLRPlusDomainsQuery_PeopleGet

@dynamic userId;

+ (instancetype)queryWithUserId:(NSString *)userId {
  NSArray *pathParams = @[ @"userId" ];
  NSString *pathURITemplate = @"people/{userId}";
  GTLRPlusDomainsQuery_PeopleGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.userId = userId;
  query.expectedObjectClass = [GTLRPlusDomains_Person class];
  query.loggingName = @"plusDomains.people.get";
  return query;
}

@end

@implementation GTLRPlusDomainsQuery_PeopleList

@dynamic collection, maxResults, orderBy, pageToken, userId;

+ (instancetype)queryWithUserId:(NSString *)userId
                     collection:(NSString *)collection {
  NSArray *pathParams = @[
    @"collection", @"userId"
  ];
  NSString *pathURITemplate = @"people/{userId}/people/{collection}";
  GTLRPlusDomainsQuery_PeopleList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.userId = userId;
  query.collection = collection;
  query.expectedObjectClass = [GTLRPlusDomains_PeopleFeed class];
  query.loggingName = @"plusDomains.people.list";
  return query;
}

@end

@implementation GTLRPlusDomainsQuery_PeopleListByActivity

@dynamic activityId, collection, maxResults, pageToken;

+ (instancetype)queryWithActivityId:(NSString *)activityId
                         collection:(NSString *)collection {
  NSArray *pathParams = @[
    @"activityId", @"collection"
  ];
  NSString *pathURITemplate = @"activities/{activityId}/people/{collection}";
  GTLRPlusDomainsQuery_PeopleListByActivity *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.activityId = activityId;
  query.collection = collection;
  query.expectedObjectClass = [GTLRPlusDomains_PeopleFeed class];
  query.loggingName = @"plusDomains.people.listByActivity";
  return query;
}

@end

@implementation GTLRPlusDomainsQuery_PeopleListByCircle

@dynamic circleId, maxResults, pageToken;

+ (instancetype)queryWithCircleId:(NSString *)circleId {
  NSArray *pathParams = @[ @"circleId" ];
  NSString *pathURITemplate = @"circles/{circleId}/people";
  GTLRPlusDomainsQuery_PeopleListByCircle *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.circleId = circleId;
  query.expectedObjectClass = [GTLRPlusDomains_PeopleFeed class];
  query.loggingName = @"plusDomains.people.listByCircle";
  return query;
}

@end
